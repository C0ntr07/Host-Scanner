#pragma once
#include "Stdafx.h"
#include <string>
#include <vector>
#include <unordered_set>
#include <unordered_map>

/*!
 * Represents a CPE dictionary entry.
 */
struct CveEntry
{

	/*!
	 * CVE identifier of the entry.
	 */
	std::string cve;

	/*!
	 * Severity of the vulnerability.
	 */
	float severity;

	/*!
	 * List of vulnerable CPE names.
	 */
	std::unordered_set<std::string> affected;

};

/*!
 * Implements the lookup of CPE names in the vulnerability database.
 */
class VulnerabilityLookup
{
public:
	
	/*!
	 * Searches the vulnerability database for entries affecting the specified CPE name.
	 * 
	 * \param cpe CPE name to lookup.
	 * 
	 * \return Matching CVE entries.
	 */
	std::vector<struct CveEntry*> Scan(const std::string& cpe);
	
	/*!
	 * Searches the vulnerability database for entries affecting the specified CPE names.
	 * 
	 * \param cpes CPE names to lookup.
	 * 
	 * \return Matching CVE entries.
	 */
	std::unordered_map<std::string, std::vector<struct CveEntry*>> Scan(const std::vector<std::string>& cpes);

	/*!
	 * Gets the CVE entries.
	 *
	 * \return List of CVE entries.
	 */
	static std::vector<struct CveEntry*> GetEntries();

	/*!
	 * Frees up the resources allocated during the lifetime of this instance.
	 */
	~VulnerabilityLookup();

private:

	/*!
	 * List of CVE entries with their associated product list.
	 */
	static std::vector<struct CveEntry*> entries;

	/*!
	 * Loads the entries database from external file.
	 */
	static void loadEntries();

};
